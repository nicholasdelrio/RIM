package edu.utep.cybershare.rim.ontology;

import edu.utep.cybershare.rim.ontology.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: Factory<br>
 * @version generated on Wed Jun 11 10:09:29 GMT-07:00 2014 by nick
 */
public class Factory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public Factory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public Factory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/RIM/rim.owl#Agency
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/RIM/rim.owl#Agency", Agency.class, DefaultAgency.class);
    }

    /**
     * Creates an instance of type Agency.  Modifies the underlying ontology.
     */
    public Agency createAgency(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGENCY, DefaultAgency.class);
    }

    /**
     * Gets an instance of type Agency with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Agency getAgency(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGENCY, DefaultAgency.class);
    }

    /**
     * Gets all instances of Agency from the ontology.
     */
    public Collection<? extends Agency> getAllAgencyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGENCY, DefaultAgency.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/RIM/rim.owl#Institution
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/RIM/rim.owl#Institution", Institution.class, DefaultInstitution.class);
    }

    /**
     * Creates an instance of type Institution.  Modifies the underlying ontology.
     */
    public Institution createInstitution(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INSTITUTION, DefaultInstitution.class);
    }

    /**
     * Gets an instance of type Institution with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Institution getInstitution(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INSTITUTION, DefaultInstitution.class);
    }

    /**
     * Gets all instances of Institution from the ontology.
     */
    public Collection<? extends Institution> getAllInstitutionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INSTITUTION, DefaultInstitution.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/RIM/rim.owl#Person
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/RIM/rim.owl#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/RIM/rim.owl#Project
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/RIM/rim.owl#Project", Project.class, DefaultProject.class);
    }

    /**
     * Creates an instance of type Project.  Modifies the underlying ontology.
     */
    public Project createProject(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT, DefaultProject.class);
    }

    /**
     * Gets an instance of type Project with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project getProject(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT, DefaultProject.class);
    }

    /**
     * Gets all instances of Project from the ontology.
     */
    public Collection<? extends Project> getAllProjectInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT, DefaultProject.class);
    }


}
